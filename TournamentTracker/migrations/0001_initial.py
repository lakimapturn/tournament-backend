# Generated by Django 4.0.4 on 2023-11-10 18:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveIntegerField(default=0)),
                ('gender', models.CharField(choices=[('Female', 'Female'), ('Male', 'Male')], default='', max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('image', models.ImageField(blank=True, default='', null=True, upload_to='')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('role', models.CharField(choices=[('Starting', 'Starting'), ('Substitute', 'Substitute')], default='', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('logo', models.ImageField(blank=True, default='', null=True, upload_to='')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SchoolPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(default=0)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.school')),
            ],
            options={
                'ordering': ('points',),
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('image', models.ImageField(blank=True, default='', null=True, upload_to='')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('first_name', 'last_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(blank=True, choices=[('Not Started', 'Not Started'), ('Ongoing', 'Ongoing'), ('Ended', 'Ended')], default='Not Started', max_length=16, null=True)),
                ('points_per_win', models.PositiveSmallIntegerField(default=1)),
                ('sets', models.PositiveSmallIntegerField(default=3)),
                ('image', models.ImageField(blank=True, default='', null=True, upload_to='')),
                ('cutoff_month', models.CharField(choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], default='September', max_length=10)),
                ('categories', models.ManyToManyField(related_name='category_tournaments', to='TournamentTracker.category')),
                ('event_types', models.ManyToManyField(related_name='event_tournaments', to='TournamentTracker.eventtype')),
                ('schools', models.ManyToManyField(blank=True, related_name='tournaments', to='TournamentTracker.schoolpoints')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.sport')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.school')),
            ],
            options={
                'ordering': ('-start_date', '-end_date'),
            },
        ),
        migrations.CreateModel(
            name='TempPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('team_num', models.PositiveSmallIntegerField(default=0)),
                ('role', models.CharField(choices=[('Starting', 'Starting'), ('Substitute', 'Substitute')], default='', max_length=10)),
                ('category', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.category')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.school')),
                ('tournament', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='temp_players', to='TournamentTracker.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveIntegerField(default=0)),
                ('draws', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('team_num', models.PositiveSmallIntegerField(default=1)),
                ('category', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.category')),
                ('players', models.ManyToManyField(related_name='team', to='TournamentTracker.player')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.school')),
                ('tournament', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='tournament_teams', to='TournamentTracker.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(blank=True, default='', max_length=32, null=True)),
                ('match_number', models.PositiveSmallIntegerField(default=1)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_matches', to='TournamentTracker.category')),
                ('played_by', models.ManyToManyField(blank=True, related_name='matches_played', to='TournamentTracker.player')),
                ('team1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_match', to='TournamentTracker.team')),
                ('team2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team2_match', to='TournamentTracker.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_matches', to='TournamentTracker.tournament')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_winner', to='TournamentTracker.team')),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='TournamentTracker.eventtype'),
        ),
    ]
